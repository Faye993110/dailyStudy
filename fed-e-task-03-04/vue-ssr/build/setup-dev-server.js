const fs = require('fs')
const path = require('path')
const chokidar = require('chokidar')
const webpack = require('webpack')
const webpackDevMiddleware = require('webpack-dev-middleware')
const hotMiddleware = require('webpack-hot-middleware')

const resolve = (file) => path.resolve(__dirname, file)

module.exports = (server, callback) => {
  let ready
  const onReady = new Promise((r) => (ready = r))
  let serverBundle
  let clientManifest
  let template
  const update = () => {
    if (template && serverBundle && clientManifest) {
      // 构建完毕，通知 server 可以 render 渲染了
      ready()
      // 更新 server 中的 Renderer
      callback(serverBundle, template, clientManifest)
    }
  }

  // 监视构建 template，调用 update 更新 Renderer
  const templatePath = path.resolve(__dirname, '../index.template.html')
  template = fs.readFileSync(templatePath, 'utf-8')
  update()
  chokidar.watch(templatePath).on('change', () => {
    template = fs.readFileSync(templatePath, 'utf-8')
    console.log('template updated.')
    update()
  })

  // 监视构建 serverBundle，调用 update 更新 Renderer
  const serverConfig = require('./webpack.server.config')
  //通过webpack创建的编译器
  const serverCompiler = webpack(serverConfig)
  const serverDevMiddleware = webpackDevMiddleware(serverCompiler, {
    logLevel: 'silent', //关闭日志输出， 由FriendlyErrorsWebpackPlugin 处理
  })
  serverCompiler.hooks.done.tap('server', () => {
    serverBundle = JSON.parse(
      //读取内存中的文件
      serverDevMiddleware.fileSystem.readFileSync(
        resolve('../dist/vue-ssr-server-bundle.json'),
        'utf-8'
      )
    )
    // console.log(serverBundle)
    update()
  })
  // serverCompiler.watch(
  //   {
  //     // 监视打包的可选配置参数
  //   },
  //   (err, stats) => {
  //     // console.log('err => ', err)
  //     // console.log('stats => ', stats)
  //     if (err) throw err
  //     if (stats.hasErrors()) return
  //     // read bundle generated by vue-ssr-webpack-plugin
  //     serverBundle = JSON.parse(
  //       fs.readFileSync(resolve('../dist/vue-ssr-server-bundle.json'), 'utf-8')
  //     )
  //     // 更新 Renderer
  //     update()
  //   }
  // )

  // 监视构建 serverBundle -> 调用 update -> 更新 Renderer渲染器
  const clientConfig = require('./webpack.client.config')
  // ====================== 热更新配置 ============================
  clientConfig.plugins.push(new webpack.HotModuleReplacementPlugin())
  clientConfig.entry.app = [
    'webpack-hot-middleware/client',
    clientConfig.entry.app,
  ]
  clientConfig.output.filename = '[name].js'
  const clientCompiler = webpack(clientConfig)
  clientDevMiddleware = webpackDevMiddleware(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    // 重要!输出资源的访问路径前缀，应该和 客户端打包输出的 publicPath 一致
    logLevel: 'silent',
  })
  clientCompiler.hooks.done.tap('client', () => {
    clientManifest = JSON.parse(
      clientDevMiddleware.fileSystem.readFileSync(
        resolve('../dist/vue-ssr-client-manifest.json'),
        'utf-8'
      )
    )
    update()
  })

  // 挂载热更新的中间件
  server.use(
    hotMiddleware(clientCompiler, {
      log: false,
    })
  )

  // 重要!将内存中的资源通过 Express 中间件对外公开访问
  //将 clientDevMiddleware 挂载到 Express 服务中，提供对其内部内存中数据的访问
  server.use(clientDevMiddleware)
  return onReady
}
